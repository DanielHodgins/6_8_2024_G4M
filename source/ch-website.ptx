<?xml version='1.0' encoding='utf-8'?>
<chapter xml:id="ch-github-pages" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Websites</title>
    <section xml:id="sec-upload-html">
        <title>Using GitHub Pages</title>
        <p>
Having made your first repository in <xref ref="ch-first-repo"/>, and
committed a few changes, you are now ready to share your work with the
public. One way is to share a link to your repository at <c>GitHub.com</c>;
as long as you made it a public repository, anyone can see your files.
        </p>
        <p>
Another option is to use <term>GitHub Pages</term> to host
a customizable website with your work. This can be done with
any existing repository, so let's try it out with our existing
example first. Use GitHub.dev to create two files in the root
of your project.
            <ul>
                <li>
                    <p>
Create a blank text file named <c>.nojekyll</c>
(note the period at the start).
This will disable some advanced features of GitHub Pages we don't need
right now.
                    </p>
                </li>
                <li>
                    <p>
Create an <c>index.html</c> file. This book won't discuss how
to author much HTML, as
we'll learn how to author our website content in Markdown in the next
section, but for now add the following content:
                    </p>
                    <program language="html">
                        <input>
<xi:include href="../assets/ch-website-example.html" parse="text"/>
                        </input>
                    </program>
                </li>
                <li>
                    <p>
Download <c>git-branches.png</c> from <xref ref="fig-git-branches"/>
and upload it to GitHub.dev.
                    </p>
                </li>
            </ul>
        </p>
        <p>
Commit this update to your repository using Source Control,
and confirm you see the two new files on your GitHub.com repository
webpage.
        </p>
        <p>
To enable GitHub Pages, go to your repository Settings, and choose
Pages from the sidebar. From there you can select to 
<q>Deploy from a branch</q>, using the <c>main</c> branch
and the <c>/ (root)</c>
directory, and after a few moments your site will be enabled.
        </p>
        <p>
Once enabled, GitHub will provide a link to your public GitHub Pages
website, hosted at <c>GitHub.io</c>. Click it and you'll see the
content of your <c>index.html</c> file, which displays the image
downloaded as <c>git-branches.png</c>. (It should look like
<url href="./external/ch-website-example.html">this</url>.)
        </p>
        <p>
It's good to remember how to
distinguish the three GitHub domains:
        <ul>
            <li>
                <p>
<c>GitHub.com</c> is where your repository lives. It can be public
or private.
                </p>
            </li>
            <li>
                <p>
<c>GitHub.dev</c> is where you can make changes to your repository
through your web browser. This is private to you and you must commit
and push your changes to the GitHub.com repository every so often.
                </p>
            </li>
            <li>
                <p>
<c>GitHub.io</c> is your public GitHub Pages website, which you can
edit by updating your repository files.
                </p>
            </li>
        </ul>
    </p>
    <p>
I recommend you add a link to your <c>GitHub.io</c> website from
your <c>GitHub.com</c> repository page. On your repository page,
there's an <q>About</q> sidebar. You can edit this section to add
whatever details you like, and there's a checkbox to automatically
add a link to your <c>GitHub.io</c> website for everyone's convenience.
    </p>
    </section>
    <section xml:id="sec-using-a-template">
        <title>Using a Template</title>
        <p>
While you can create a custom website by authoring HTML, it'd be
great to not have to! There are several templates available for
GitHub Pages that allow you to author your content in Markdown,
as well as providing nice themes, automatic linking between different
sections of your website, and so on.
        </p>
        <p>
Note that GitHub Pages uses something called <q>Jekyll</q> to
generate websites from Markdown files. So if you want to look around
the internet for your perfect template, try seaching for <q>Jekyll templates</q>
or <q>GitHub Pages templates</q> in your favorite search engine.
        </p>
        <p>
For this book, I've created a <term>fork</term> of the
<url href="https://github.com/mmistakes/minimal-mistakes/">
    Minimal Mistakes
</url>
template.
A fork of a repository is a copy someone else makes of the original.
In this case,
I made a fork so that I could ensure my book stays compatible with the
template I'm providing you, even if the original template receives an
update from its author. I'm allowed to do this because the
Minimal Mistakes template is made available under the terms of the
<url href="https://github.com/mmistakes/minimal-mistakes/blob/master/LICENSE">
    open-source MIT license
</url>.
        </p>
        <p>
Certain repositories on GitHub are designated as <term>templates</term>. A template
creates a shallow copy of all the files in the repository, without the full history
of the project. This is meant for situations like a GitHub Pages website, where
you probably don't care about every single change that was made to create the template
you're using; you just want the latest working files so you can insert your own pages
and posts and get them online.
        </p>
        <p>
Visit
<url href="https://github.com/StevenClontz/github-for-mathematicians-minimal-mistakes">
    my Minimal Mistakes fork
</url>
and click <q>Use this template</q>, and <q>Create a new repository</q>.
This creates a new repository you own on <c>GitHub.com</c>, and
you can follow the instructions in the previous section to enable GitHub Pages.
Once that's done, visit your new <c>GitHub.io</c> website to see the
placeholder content of your new website
(don't forget to update your repository page's <q>About</q> sidebar to add a
convenient link).
        </p>
    </section>
    <section xml:id="sec-posts-and-pages">
        <title>Posts and pages</title>
        <p>Hello</p>
    </section>
</chapter>